{
  "address": "0x1EE196BC220ac2F7Af99475d1FD0F3b6614c8CF1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "address_white",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "address_black",
          "type": "address"
        }
      ],
      "name": "createBoard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "address_white",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "address_black",
          "type": "address"
        }
      ],
      "name": "findBoardByAddresses",
      "outputs": [
        {
          "internalType": "contract FenBoard",
          "name": "fenBoard",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "address_white",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "address_black",
          "type": "address"
        }
      ],
      "name": "getBoardState",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGreeting",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "boardState",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "address_white",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "address_black",
          "type": "address"
        }
      ],
      "name": "updateBoard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaad60ee1306c1272f0948ef7f14f2000d8eaea6f2b1db38fb713d824372bf2ae",
  "receipt": {
    "to": null,
    "from": "0x8012D8cA704c26D708546C4153715C8a8E939D44",
    "contractAddress": "0x1EE196BC220ac2F7Af99475d1FD0F3b6614c8CF1",
    "transactionIndex": 0,
    "gasUsed": "853815",
    "logsBloom": "0x
    "blockHash": "0x451ba7c3b0061dc22cba857a712aab852b9d50e79612da0dcc4f2a9aa4172e15",
    "transactionHash": "0xaad60ee1306c1272f0948ef7f14f2000d8eaea6f2b1db38fb713d824372bf2ae",
    "logs": [],
    "blockNumber": 5406035,
    "cumulativeGasUsed": "853815",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "f42a64bcf84e76f95214e5a4a8cff84c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_white\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address_black\",\"type\":\"address\"}],\"name\":\"createBoard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_white\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address_black\",\"type\":\"address\"}],\"name\":\"findBoardByAddresses\",\"outputs\":[{\"internalType\":\"contract FenBoard\",\"name\":\"fenBoard\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_white\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address_black\",\"type\":\"address\"}],\"name\":\"getBoardState\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGreeting\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"boardState\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"address_white\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address_black\",\"type\":\"address\"}],\"name\":\"updateBoard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createBoard(address,address)\":{\"notice\":\"Creates a new FenBoard. param address_white Address of the white player. param address_black Address of the black player. revert If the FenBoard already exists (based on the address combination).\"},\"findBoardByAddresses(address,address)\":{\"notice\":\"Gets the FenBoard for the given address combination. param address_white Address of the white player. param address_black Address of the black player. returns The FenBoard for the given address combination or an empty contract address if no FenBoard exists for the given address combination.\"},\"getBoardState(address,address)\":{\"notice\":\"Gets the FenBoard for the given board state. param address_white Address of the white player. param address_black Address of the black player. returns The current boardState of the FenBoard. revert If the FenBoard does not exist.\"},\"updateBoard(string,address,address)\":{\"notice\":\"Sets a new boardState for a FenBoard. param boardState The new boardState to set to. param address_white Address of the white player. param address_black Address of the black player. revert If the FenBoard does not exist.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FenService.sol\":\"FenService\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/FenBoard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract FenBoard {\\r\\n\\r\\n    // private final address address_white\\r\\n    address private immutable address_white;\\r\\n\\r\\n    // private final address address_black\\r\\n    address private immutable address_black;\\r\\n\\r\\n    // private String boardState\\r\\n    string private boardState;\\r\\n\\r\\n    // TODO: Make required modifiers for the _ variables.\\r\\n    // Only address_white or address_black should be allowed to edit the boardState.\\r\\n\\r\\n    // public constructor\\r\\n    constructor(address _address_white, address _address_black) {\\r\\n        address_white = _address_white;\\r\\n        address_black = _address_black;\\r\\n\\r\\n        boardState = \\\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\\\";\\r\\n    }\\r\\n\\r\\n    // modifier onlyPlayers() {\\r\\n    //     require(msg.sender == address_white || msg.sender == address_white, \\\"Only players can make moves.\\\");\\r\\n    //     _;\\r\\n    // }\\r\\n\\r\\n    // public contract address getter\\r\\n    // function getContractAddress() public view returns (address) {\\r\\n    //     return address(this);\\r\\n    // }\\r\\n\\r\\n    // public getter for white address\\r\\n    function getWhiteAddress() public view returns (address) {\\r\\n        return address_white;\\r\\n    }\\r\\n\\r\\n    // public getter for black address\\r\\n    function getBlackAddress() public view returns (address) {\\r\\n        return address_black;\\r\\n    }\\r\\n\\r\\n    // public getter for board state\\r\\n    function getBoardState() public view returns (string memory) {\\r\\n        return boardState;\\r\\n    }\\r\\n\\r\\n    // public setter for board state\\r\\n    function setBoardState(string memory _boardState) public {\\r\\n        boardState = _boardState;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x8f0d4861e8ef6abf26b8be513741cf017e809212e99f4072b4ffcca253c57cc5\",\"license\":\"MIT\"},\"contracts/FenService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./FenBoard.sol\\\";\\r\\n\\r\\n// TODO: Add Biconomy Relayers?\\r\\n\\r\\n// Help with error handling: https://www.youtube.com/watch?v=1Mi1ub9bIv8\\r\\ncontract FenService {\\r\\n\\r\\n    FenBoard[] private _fenBoards;\\r\\n\\r\\n    // struct ResponseDto {\\r\\n    //     uint statusCode;\\r\\n    //     string message;\\r\\n    //     string data;\\r\\n    // }\\r\\n\\r\\n    address falsyAddress = 0x0000000000000000000000000000000000000000;\\r\\n\\r\\n    function getGreeting() external pure returns (string memory) {\\r\\n        return \\\"Hi! You've successfully connected to the FenService contract!\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Creates a new FenBoard.\\r\\n    * param address_white Address of the white player.\\r\\n    * param address_black Address of the black player.\\r\\n    * revert If the FenBoard already exists (based on the address combination).\\r\\n    */\\r\\n    function createBoard(address address_white, address address_black) external { // Transaction\\r\\n        FenBoard board = findBoardByAddresses(address_white, address_black);\\r\\n        \\r\\n        // require the board's address to be equal to a blank address, otherwise a board already exists for that address combination.\\r\\n        require(address(board) == address(falsyAddress), \\\"Board already exists.\\\");\\r\\n\\r\\n        board = new FenBoard(address_white, address_black);\\r\\n        _fenBoards.push(board);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Gets the FenBoard for the given address combination.\\r\\n    * param address_white Address of the white player.\\r\\n    * param address_black Address of the black player.\\r\\n    * returns The FenBoard for the given address combination or an empty contract address if no FenBoard exists for the given address combination.\\r\\n    */\\r\\n    function findBoardByAddresses(address address_white, address address_black) public view returns (FenBoard fenBoard) {\\r\\n        for (uint i = 0; i < _fenBoards.length; i++) {\\r\\n            if (_fenBoards[i].getWhiteAddress() == address_white && _fenBoards[i].getBlackAddress() == address_black) {\\r\\n                return _fenBoards[i]; // 0xC5D1812068933E598cD9cD3E4dD35B95873003Ef\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // returns an empty contract if no boards were found: 0x0000000000000000000000000000000000000000\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Gets the FenBoard for the given board state.\\r\\n    * param address_white Address of the white player.\\r\\n    * param address_black Address of the black player.\\r\\n    * returns The current boardState of the FenBoard.\\r\\n    * revert If the FenBoard does not exist.\\r\\n    */\\r\\n    function getBoardState(address address_white, address address_black) external view returns (string memory) {\\r\\n        FenBoard board = findBoardByAddresses(address_white, address_black);\\r\\n\\r\\n        require(address(board) != address(falsyAddress), \\\"Board does not yet exists.\\\");\\r\\n\\r\\n        return board.getBoardState();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Sets a new boardState for a FenBoard.\\r\\n    * param boardState The new boardState to set to.\\r\\n    * param address_white Address of the white player.\\r\\n    * param address_black Address of the black player.\\r\\n    * revert If the FenBoard does not exist.\\r\\n    */\\r\\n    function updateBoard(string calldata boardState, address address_white, address address_black) external {\\r\\n        FenBoard board = findBoardByAddresses(address_white, address_black);\\r\\n\\r\\n        require(address(board) != address(falsyAddress), \\\"Board does not yet exists.\\\");\\r\\n\\r\\n        board.setBoardState(boardState);\\r\\n    }\\r\\n    \\r\\n}\",\"keccak256\":\"0x7ff8b95b66da371f703a446069397161147f4080382e6f34d1f600e95c306771\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600180546001600160a01b031916905534801561002057600080fd5b50610e75806100306000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063a8e9390811610050578063a8e93908146100bc578063c0a5a366146100d1578063fe50cc72146100e457600080fd5b806351369e2e1461006c5780637916b1d61461009c575b600080fd5b61007f61007a3660046105f9565b6100ec565b6040516001600160a01b0390911681526020015b60405180910390f35b6100af6100aa3660046105f9565b6102cc565b6040516100939190610798565b6100cf6100ca366004610631565b6103bd565b005b6100cf6100df3660046105f9565b610491565b6100af6105a9565b6000805b6000548110156102c457836001600160a01b03166000828154811061012557634e487b7160e01b600052603260045260246000fd5b600091825260209182902001546040805163083a08a160e11b815290516001600160a01b0390921692631074114292600480840193829003018186803b15801561016e57600080fd5b505afa158015610182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a691906105d6565b6001600160a01b031614801561026e5750826001600160a01b0316600082815481106101e257634e487b7160e01b600052603260045260246000fd5b60009182526020918290200154604080516386ea03eb60e01b815290516001600160a01b03909216926386ea03eb92600480840193829003018186803b15801561022b57600080fd5b505afa15801561023f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026391906105d6565b6001600160a01b0316145b156102b2576000818154811061029457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031691506102c69050565b806102bc816107fb565b9150506100f0565b505b92915050565b606060006102da84846100ec565b6001549091506001600160a01b03808316911614156103405760405162461bcd60e51b815260206004820152601a60248201527f426f61726420646f6573206e6f7420796574206578697374732e00000000000060448201526064015b60405180910390fd5b806001600160a01b0316632420f7f06040518163ffffffff1660e01b815260040160006040518083038186803b15801561037957600080fd5b505afa15801561038d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103b591908101906106c0565b949350505050565b60006103c983836100ec565b6001549091506001600160a01b038083169116141561042a5760405162461bcd60e51b815260206004820152601a60248201527f426f61726420646f6573206e6f7420796574206578697374732e0000000000006044820152606401610337565b60405163f481f76360e01b81526001600160a01b0382169063f481f763906104589088908890600401610769565b600060405180830381600087803b15801561047257600080fd5b505af1158015610486573d6000803e3d6000fd5b505050505050505050565b600061049d83836100ec565b6001549091506001600160a01b038083169116146104fd5760405162461bcd60e51b815260206004820152601560248201527f426f61726420616c7265616479206578697374732e00000000000000000000006044820152606401610337565b828260405161050b906105c9565b6001600160a01b03928316815291166020820152604001604051809103906000f08015801561053e573d6000803e3d6000fd5b50600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055505050565b60606040518060600160405280603d8152602001610e03603d9139905090565b6105b28061085183390190565b6000602082840312156105e7578081fd5b81516105f281610838565b9392505050565b6000806040838503121561060b578081fd5b823561061681610838565b9150602083013561062681610838565b809150509250929050565b60008060008060608587031215610646578182fd5b843567ffffffffffffffff8082111561065d578384fd5b818701915087601f830112610670578384fd5b81358181111561067e578485fd5b88602082850101111561068f578485fd5b602092830196509450508501356106a581610838565b915060408501356106b581610838565b939692955090935050565b6000602082840312156106d1578081fd5b815167ffffffffffffffff808211156106e8578283fd5b818401915084601f8301126106fb578283fd5b81518181111561070d5761070d610822565b604051601f8201601f19908116603f0116810190838211818310171561073557610735610822565b8160405282815287602084870101111561074d578586fd5b61075e8360208301602088016107cb565b979650505050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60208152600082518060208401526107b78160408501602087016107cb565b601f01601f19169190910160400192915050565b60005b838110156107e65781810151838201526020016107ce565b838111156107f5576000848401525b50505050565b600060001982141561081b57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461084d57600080fd5b5056fe60c060405234801561001057600080fd5b506040516105b23803806105b283398101604081905261002f91610131565b606082811b6001600160601b031990811660805282821b1660a052604080519182019052603880825261057a602083013980516100749160009160209091019061007c565b50505061019e565b82805461008890610163565b90600052602060002090601f0160209004810192826100aa57600085556100f0565b82601f106100c357805160ff19168380011785556100f0565b828001600101855582156100f0579182015b828111156100f05782518255916020019190600101906100d5565b506100fc929150610100565b5090565b5b808211156100fc5760008155600101610101565b80516001600160a01b038116811461012c57600080fd5b919050565b60008060408385031215610143578182fd5b61014c83610115565b915061015a60208401610115565b90509250929050565b600181811c9082168061017757607f821691505b6020821081141561019857634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c60a05160601c6103b36101c7600039600060b401526000605301526103b36000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806310741142146100515780632420f7f01461009d57806386ea03eb146100b2578063f481f763146100d8575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100a56100ed565b60405161009491906102d9565b7f0000000000000000000000000000000000000000000000000000000000000000610073565b6100eb6100e636600461022f565b61017f565b005b6060600080546100fc9061032c565b80601f01602080910402602001604051908101604052809291908181526020018280546101289061032c565b80156101755780601f1061014a57610100808354040283529160200191610175565b820191906000526020600020905b81548152906001019060200180831161015857829003601f168201915b5050505050905090565b8051610192906000906020840190610196565b5050565b8280546101a29061032c565b90600052602060002090601f0160209004810192826101c4576000855561020a565b82601f106101dd57805160ff191683800117855561020a565b8280016001018555821561020a579182015b8281111561020a5782518255916020019190600101906101ef565b5061021692915061021a565b5090565b5b80821115610216576000815560010161021b565b600060208284031215610240578081fd5b813567ffffffffffffffff80821115610257578283fd5b818401915084601f83011261026a578283fd5b81358181111561027c5761027c610367565b604051601f8201601f19908116603f011681019083821181831017156102a4576102a4610367565b816040528281528760208487010111156102bc578586fd5b826020860160208301379182016020019490945295945050505050565b6000602080835283518082850152825b81811015610305578581018301518582016040015282016102e9565b818111156103165783604083870101525b50601f01601f1916929092016040019392505050565b600181811c9082168061034057607f821691505b6020821081141561036157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220beb42eed5e881fbf72bc3aa97cda8f1d1d94cfd5d97166293380367535a81c7f64736f6c63430008040033726e62716b626e722f70707070707070702f382f382f382f382f50505050505050502f524e42514b424e522077204b516b71202d2030203148692120596f75277665207375636365737366756c6c7920636f6e6e656374656420746f207468652046656e5365727669636520636f6e747261637421a2646970667358221220b4a3a624b043ad4b792496cc959bf3251fa1ed58b178a1905896e7baea7274a864736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063a8e9390811610050578063a8e93908146100bc578063c0a5a366146100d1578063fe50cc72146100e457600080fd5b806351369e2e1461006c5780637916b1d61461009c575b600080fd5b61007f61007a3660046105f9565b6100ec565b6040516001600160a01b0390911681526020015b60405180910390f35b6100af6100aa3660046105f9565b6102cc565b6040516100939190610798565b6100cf6100ca366004610631565b6103bd565b005b6100cf6100df3660046105f9565b610491565b6100af6105a9565b6000805b6000548110156102c457836001600160a01b03166000828154811061012557634e487b7160e01b600052603260045260246000fd5b600091825260209182902001546040805163083a08a160e11b815290516001600160a01b0390921692631074114292600480840193829003018186803b15801561016e57600080fd5b505afa158015610182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a691906105d6565b6001600160a01b031614801561026e5750826001600160a01b0316600082815481106101e257634e487b7160e01b600052603260045260246000fd5b60009182526020918290200154604080516386ea03eb60e01b815290516001600160a01b03909216926386ea03eb92600480840193829003018186803b15801561022b57600080fd5b505afa15801561023f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026391906105d6565b6001600160a01b0316145b156102b2576000818154811061029457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031691506102c69050565b806102bc816107fb565b9150506100f0565b505b92915050565b606060006102da84846100ec565b6001549091506001600160a01b03808316911614156103405760405162461bcd60e51b815260206004820152601a60248201527f426f61726420646f6573206e6f7420796574206578697374732e00000000000060448201526064015b60405180910390fd5b806001600160a01b0316632420f7f06040518163ffffffff1660e01b815260040160006040518083038186803b15801561037957600080fd5b505afa15801561038d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103b591908101906106c0565b949350505050565b60006103c983836100ec565b6001549091506001600160a01b038083169116141561042a5760405162461bcd60e51b815260206004820152601a60248201527f426f61726420646f6573206e6f7420796574206578697374732e0000000000006044820152606401610337565b60405163f481f76360e01b81526001600160a01b0382169063f481f763906104589088908890600401610769565b600060405180830381600087803b15801561047257600080fd5b505af1158015610486573d6000803e3d6000fd5b505050505050505050565b600061049d83836100ec565b6001549091506001600160a01b038083169116146104fd5760405162461bcd60e51b815260206004820152601560248201527f426f61726420616c7265616479206578697374732e00000000000000000000006044820152606401610337565b828260405161050b906105c9565b6001600160a01b03928316815291166020820152604001604051809103906000f08015801561053e573d6000803e3d6000fd5b50600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055505050565b60606040518060600160405280603d8152602001610e03603d9139905090565b6105b28061085183390190565b6000602082840312156105e7578081fd5b81516105f281610838565b9392505050565b6000806040838503121561060b578081fd5b823561061681610838565b9150602083013561062681610838565b809150509250929050565b60008060008060608587031215610646578182fd5b843567ffffffffffffffff8082111561065d578384fd5b818701915087601f830112610670578384fd5b81358181111561067e578485fd5b88602082850101111561068f578485fd5b602092830196509450508501356106a581610838565b915060408501356106b581610838565b939692955090935050565b6000602082840312156106d1578081fd5b815167ffffffffffffffff808211156106e8578283fd5b818401915084601f8301126106fb578283fd5b81518181111561070d5761070d610822565b604051601f8201601f19908116603f0116810190838211818310171561073557610735610822565b8160405282815287602084870101111561074d578586fd5b61075e8360208301602088016107cb565b979650505050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60208152600082518060208401526107b78160408501602087016107cb565b601f01601f19169190910160400192915050565b60005b838110156107e65781810151838201526020016107ce565b838111156107f5576000848401525b50505050565b600060001982141561081b57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461084d57600080fd5b5056fe60c060405234801561001057600080fd5b506040516105b23803806105b283398101604081905261002f91610131565b606082811b6001600160601b031990811660805282821b1660a052604080519182019052603880825261057a602083013980516100749160009160209091019061007c565b50505061019e565b82805461008890610163565b90600052602060002090601f0160209004810192826100aa57600085556100f0565b82601f106100c357805160ff19168380011785556100f0565b828001600101855582156100f0579182015b828111156100f05782518255916020019190600101906100d5565b506100fc929150610100565b5090565b5b808211156100fc5760008155600101610101565b80516001600160a01b038116811461012c57600080fd5b919050565b60008060408385031215610143578182fd5b61014c83610115565b915061015a60208401610115565b90509250929050565b600181811c9082168061017757607f821691505b6020821081141561019857634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c60a05160601c6103b36101c7600039600060b401526000605301526103b36000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806310741142146100515780632420f7f01461009d57806386ea03eb146100b2578063f481f763146100d8575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100a56100ed565b60405161009491906102d9565b7f0000000000000000000000000000000000000000000000000000000000000000610073565b6100eb6100e636600461022f565b61017f565b005b6060600080546100fc9061032c565b80601f01602080910402602001604051908101604052809291908181526020018280546101289061032c565b80156101755780601f1061014a57610100808354040283529160200191610175565b820191906000526020600020905b81548152906001019060200180831161015857829003601f168201915b5050505050905090565b8051610192906000906020840190610196565b5050565b8280546101a29061032c565b90600052602060002090601f0160209004810192826101c4576000855561020a565b82601f106101dd57805160ff191683800117855561020a565b8280016001018555821561020a579182015b8281111561020a5782518255916020019190600101906101ef565b5061021692915061021a565b5090565b5b80821115610216576000815560010161021b565b600060208284031215610240578081fd5b813567ffffffffffffffff80821115610257578283fd5b818401915084601f83011261026a578283fd5b81358181111561027c5761027c610367565b604051601f8201601f19908116603f011681019083821181831017156102a4576102a4610367565b816040528281528760208487010111156102bc578586fd5b826020860160208301379182016020019490945295945050505050565b6000602080835283518082850152825b81811015610305578581018301518582016040015282016102e9565b818111156103165783604083870101525b50601f01601f1916929092016040019392505050565b600181811c9082168061034057607f821691505b6020821081141561036157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220beb42eed5e881fbf72bc3aa97cda8f1d1d94cfd5d97166293380367535a81c7f64736f6c63430008040033726e62716b626e722f70707070707070702f382f382f382f382f50505050505050502f524e42514b424e522077204b516b71202d2030203148692120596f75277665207375636365737366756c6c7920636f6e6e656374656420746f207468652046656e5365727669636520636f6e747261637421a2646970667358221220b4a3a624b043ad4b792496cc959bf3251fa1ed58b178a1905896e7baea7274a864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createBoard(address,address)": {
        "notice": "Creates a new FenBoard. param address_white Address of the white player. param address_black Address of the black player. revert If the FenBoard already exists (based on the address combination)."
      },
      "findBoardByAddresses(address,address)": {
        "notice": "Gets the FenBoard for the given address combination. param address_white Address of the white player. param address_black Address of the black player. returns The FenBoard for the given address combination or an empty contract address if no FenBoard exists for the given address combination."
      },
      "getBoardState(address,address)": {
        "notice": "Gets the FenBoard for the given board state. param address_white Address of the white player. param address_black Address of the black player. returns The current boardState of the FenBoard. revert If the FenBoard does not exist."
      },
      "updateBoard(string,address,address)": {
        "notice": "Sets a new boardState for a FenBoard. param boardState The new boardState to set to. param address_white Address of the white player. param address_black Address of the black player. revert If the FenBoard does not exist."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 70,
        "contract": "contracts/FenService.sol:FenService",
        "label": "_fenBoards",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_contract(FenBoard)62)dyn_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/FenService.sol:FenService",
        "label": "falsyAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(FenBoard)62)dyn_storage": {
        "base": "t_contract(FenBoard)62",
        "encoding": "dynamic_array",
        "label": "contract FenBoard[]",
        "numberOfBytes": "32"
      },
      "t_contract(FenBoard)62": {
        "encoding": "inplace",
        "label": "contract FenBoard",
        "numberOfBytes": "20"
      }
    }
  }
}