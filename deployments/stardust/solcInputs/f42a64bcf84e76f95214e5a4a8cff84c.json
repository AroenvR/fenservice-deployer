{
  "language": "Solidity",
  "sources": {
    "contracts/FenBoard.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract FenBoard {\r\n\r\n    // private final address address_white\r\n    address private immutable address_white;\r\n\r\n    // private final address address_black\r\n    address private immutable address_black;\r\n\r\n    // private String boardState\r\n    string private boardState;\r\n\r\n    // TODO: Make required modifiers for the _ variables.\r\n    // Only address_white or address_black should be allowed to edit the boardState.\r\n\r\n    // public constructor\r\n    constructor(address _address_white, address _address_black) {\r\n        address_white = _address_white;\r\n        address_black = _address_black;\r\n\r\n        boardState = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\r\n    }\r\n\r\n    // modifier onlyPlayers() {\r\n    //     require(msg.sender == address_white || msg.sender == address_white, \"Only players can make moves.\");\r\n    //     _;\r\n    // }\r\n\r\n    // public contract address getter\r\n    // function getContractAddress() public view returns (address) {\r\n    //     return address(this);\r\n    // }\r\n\r\n    // public getter for white address\r\n    function getWhiteAddress() public view returns (address) {\r\n        return address_white;\r\n    }\r\n\r\n    // public getter for black address\r\n    function getBlackAddress() public view returns (address) {\r\n        return address_black;\r\n    }\r\n\r\n    // public getter for board state\r\n    function getBoardState() public view returns (string memory) {\r\n        return boardState;\r\n    }\r\n\r\n    // public setter for board state\r\n    function setBoardState(string memory _boardState) public {\r\n        boardState = _boardState;\r\n    }\r\n\r\n}"
    },
    "contracts/FenService.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"./FenBoard.sol\";\r\n\r\n// TODO: Add Biconomy Relayers?\r\n\r\n// Help with error handling: https://www.youtube.com/watch?v=1Mi1ub9bIv8\r\ncontract FenService {\r\n\r\n    FenBoard[] private _fenBoards;\r\n\r\n    // struct ResponseDto {\r\n    //     uint statusCode;\r\n    //     string message;\r\n    //     string data;\r\n    // }\r\n\r\n    address falsyAddress = 0x0000000000000000000000000000000000000000;\r\n\r\n    function getGreeting() external pure returns (string memory) {\r\n        return \"Hi! You've successfully connected to the FenService contract!\";\r\n    }\r\n\r\n    /**\r\n    * Creates a new FenBoard.\r\n    * param address_white Address of the white player.\r\n    * param address_black Address of the black player.\r\n    * revert If the FenBoard already exists (based on the address combination).\r\n    */\r\n    function createBoard(address address_white, address address_black) external { // Transaction\r\n        FenBoard board = findBoardByAddresses(address_white, address_black);\r\n        \r\n        // require the board's address to be equal to a blank address, otherwise a board already exists for that address combination.\r\n        require(address(board) == address(falsyAddress), \"Board already exists.\");\r\n\r\n        board = new FenBoard(address_white, address_black);\r\n        _fenBoards.push(board);\r\n    }\r\n\r\n    /**\r\n    * Gets the FenBoard for the given address combination.\r\n    * param address_white Address of the white player.\r\n    * param address_black Address of the black player.\r\n    * returns The FenBoard for the given address combination or an empty contract address if no FenBoard exists for the given address combination.\r\n    */\r\n    function findBoardByAddresses(address address_white, address address_black) public view returns (FenBoard fenBoard) {\r\n        for (uint i = 0; i < _fenBoards.length; i++) {\r\n            if (_fenBoards[i].getWhiteAddress() == address_white && _fenBoards[i].getBlackAddress() == address_black) {\r\n                return _fenBoards[i]; // 0xC5D1812068933E598cD9cD3E4dD35B95873003Ef\r\n            }\r\n        }\r\n\r\n        // returns an empty contract if no boards were found: 0x0000000000000000000000000000000000000000\r\n    }\r\n\r\n    /**\r\n    * Gets the FenBoard for the given board state.\r\n    * param address_white Address of the white player.\r\n    * param address_black Address of the black player.\r\n    * returns The current boardState of the FenBoard.\r\n    * revert If the FenBoard does not exist.\r\n    */\r\n    function getBoardState(address address_white, address address_black) external view returns (string memory) {\r\n        FenBoard board = findBoardByAddresses(address_white, address_black);\r\n\r\n        require(address(board) != address(falsyAddress), \"Board does not yet exists.\");\r\n\r\n        return board.getBoardState();\r\n    }\r\n\r\n    /**\r\n    * Sets a new boardState for a FenBoard.\r\n    * param boardState The new boardState to set to.\r\n    * param address_white Address of the white player.\r\n    * param address_black Address of the black player.\r\n    * revert If the FenBoard does not exist.\r\n    */\r\n    function updateBoard(string calldata boardState, address address_white, address address_black) external {\r\n        FenBoard board = findBoardByAddresses(address_white, address_black);\r\n\r\n        require(address(board) != address(falsyAddress), \"Board does not yet exists.\");\r\n\r\n        board.setBoardState(boardState);\r\n    }\r\n    \r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}